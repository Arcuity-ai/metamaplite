# What should a pipeline look-like?
#
# pipe-elements: (properties)
#
#     metamaplite.pipe.element.<element-name>: transformation method|input class|output class
#
# pipeline:  (one property line)
#
#     metamaplite.pipeline.<name>: element1|element2|...
#
# pipe-element properties example:
# 
metamaplite.pipe.element.analyzetext: gov.nih.nlm.nls.metamap.prefix.Scanner.analyzeText|gov.nih.nlm.nls.types.Sentence|java.util.List|tokenize sentence
metamaplite.pipe.element.displaytokenlist: gov.nih.nlm.nls.metamap.prefix.Tokenize.displayTokenList|java.util.List|java.util.List|display tokenlist
# metamaplite.pipe.element.add-pos-tags: 
metamaplite.pipe.element.genentityset: gov.nih.nlm.nls.metamap.lite.EntityLookup.generateEntitySet|java.util.List|java.util.List|find entities 
metamaplite.pipe.element.displayentityset: gov.nih.nlm.nls.metamap.lite.EntityLookup.displayEntitySet|java.util.Set|java.util.List|find entities 
#
# pipeline property example:
#
metamaplite.pipeline.simple.sentence: analyzetext|genentityset|displayentityset
#     metamaplite.pipeline.simple.sentence: analyzetext|add-entitylists|add-preferred-names|add-scores|filter-entities
#     metamaplite.pipe.element.add-preferred-names: ...
#     metamaplite.pipe.element.add-scores: ...
#     metamaplite.pipe.element.filter-entities: ...
#
# text pipeline
#
metamaplite.pipe.element.createSentenceList: gov.nih.nlm.nls.metamap.lite.SentenceExtractor.createSentenceList|java.lang.String|java.util.List|extract sentences from text
metamaplite.pipe.element.processSentenceList: gov.nih.nlm.nls.metamap.lite.Pipeline.processSentenceList|java.util.List|java.util.List|process sentences with pipeline: metamaplite.pipeline.simple.sentence
#
metamaplite.pipeline.simple.text: createSentenceList|processSentenceList
#
